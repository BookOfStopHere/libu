
[uri]:
    u_uri_t is now opaque.  Type attributes can be accessed only through their 
    getter methods, which are *new* with 2.0:
        * const char *u_uri_scheme (u_uri_t *uri)
        * const char *u_uri_user (u_uri_t *uri)
        * const char *u_uri_pwd (u_uri_t *uri)
        * const char *u_uri_host (u_uri_t *uri)
        * const char *u_uri_path (u_uri_t *uri)
        * const char *u_uri_port (u_uri_t *uri)

[buf]:
    u_buf_t is now opaque.  Type attributes can be accessed only through their
    getter methods, which where already present in 1.x:
        * void *u_buf_ptr (u_buf_t *buf);
        * size_t u_buf_len (u_buf_t *buf);
        * size_t u_buf_size (u_buf_t *buf);

[net]:
    This module has been completely revamped, both implementation and 
    interfaces have changed dramatically, the rationale being "more simplicity":
    the creation of sockets using UNIX IPC, TCP, UDP and SCTP over IPv4 and 
    IPv6 is carried out through the very same interface.
    The sole chance for your application to be backwards compatible is in case 
    it used the u_net_sock() only (which is indeed likely to happen).

    Interfaces removed:
        * u_net_sock_tcp
        * u_net_sock_udp
        * u_net_sock_unix
        * u_net_tcp4_ssock
        * u_net_tcp4_csock
        * u_net_tcp6_ssock
        * u_net_tcp6_csock
        * u_net_unix_ssock
        * u_net_unix_csock
        * u_net_uri2sin
        * u_net_uri2sun
        * u_net_addr_new

    Interfaces changed:
        * u_net_uri2addr
            the socket 'mode' has been added as a mandatory input parameter
        * u_net_sock
            the socket 'mode' has been added as an optional input parameter in 
            a backwards-compatible way

    Newly added interfaces:
        * u_net_sock_by_addr
        * u_net_addr_set_opts
        * u_net_addr_add_opts
        * u_net_addr_can_accept
        * u_socket
        * u_connect
        * u_listen
        * u_bind
        * u_setsockopt
        * u_getsockopt
        * u_sa_ntop
        * u_inet_ntop

[array]
    The setter/getter methods for generic pointers have been restyled.  See
    http://coding.derkeiler.com/Archive/C_CPP/comp.lang.c/2008-10/msg01683.html
    for details about the reason why we had to move.  The following interfaces 
    have been modified: they give back the error code through a result argument,
    and the generic (ie. void*) pointer as the returned value:
    
    New interfaces:
    * void *u_array_get_ptr (u_array_t *da, size_t idx, int *prc);
    * void *u_array_set_ptr (u_array_t *da, size_t idx, void *v, int *prc);

    Old (removed) interfaces:
    * int u_array_get_ptr (u_array_t *da, size_t idx, void **pv);
    * int u_array_set_ptr (u_array_t *da, size_t idx, void *v, void **pold);

    Note that the returned pointer is not sufficient to point out a failure in 
    the get/set operation, since a NULL value could be perfectly valid: 
    *always* use '*prc' to discriminate through a good (i.e. *prc == 0) and bad
    (i.e. *prc == -1) run.

